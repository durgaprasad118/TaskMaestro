generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Task {
  taskId    String    @id @default(cuid())
  title     String
  userId    String
  user      User      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  date      DateTime
  labels    String[]
  subTasks  SubTask[]
  priority  Priority
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum Priority {
  P1
  P2
  P3
}

model SubTask {
  subId     String  @id @default(cuid())
  title     String
  completed Boolean
  taskId    String
  task      Task    @relation(fields: [subId], references: [taskId], onDelete: Cascade)
}
